{
  "language": "Solidity",
  "sources": {
    "contracts/FundMe.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"./PriceConverter.sol\";\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\nerror FundMe__NotOwner();\n\n/**\n * @title Funding contract sample\n * @author Hritik Shelar\n * @notice This contract creates a sample funding contract\n * @dev This implements price feed as our library\n */\n\ncontract FundMe {\n  using PriceConverter for uint256;\n\n  uint256 public constant MIN_USD = 50 * 1e18;\n\n  address[] private s_funders;\n  mapping(address => uint256) private s_address2Amt;\n\n  address private immutable i_owner;\n\n  AggregatorV3Interface private s_priceFeed;\n\n  modifier isOwner() {\n    if (msg.sender != i_owner) revert FundMe__NotOwner();\n    _;\n  }\n\n  constructor(address priceFeedAddress) {\n    i_owner = msg.sender;\n    s_priceFeed = AggregatorV3Interface(priceFeedAddress);\n  }\n\n  receive() external payable {\n    fund();\n  }\n\n  fallback() external payable {\n    fund();\n  }\n\n  /**\n   * @notice This function accepts the funds after some threshold of 50$ and above\n   */\n  function fund() public payable {\n    require(msg.value.converter(s_priceFeed) >= MIN_USD, \"Not enough\");\n    s_funders.push(msg.sender);\n    s_address2Amt[msg.sender] += msg.value;\n  }\n\n  function withdraw() public isOwner {\n    for (uint256 i = 0; i < s_funders.length; i++) {\n      address funder = getFunder(i);\n      s_address2Amt[funder] = 0;\n    }\n\n    s_funders = new address[](0);\n    (bool isSuccess, ) = payable(msg.sender).call{value: address(this).balance}(\n      \"\"\n    );\n    require(isSuccess, \"Call failed\");\n  }\n\n  function getOwner() public view returns (address) {\n    return i_owner;\n  }\n\n  function getAddress2Amt(address funder) public view returns (uint256) {\n    return s_address2Amt[funder];\n  }\n\n  function getFunder(uint256 index) public view returns (address) {\n    return s_funders[index];\n  }\n\n  function getPriceFeed() public view returns (AggregatorV3Interface) {\n    return s_priceFeed;\n  }\n}\n"
    },
    "contracts/PriceConverter.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\nlibrary PriceConverter {\n  function getPrice(AggregatorV3Interface priceFeed)\n    internal\n    view\n    returns (uint256)\n  {\n    // AggregatorV3Interface pricefeed = AggregatorV3Interface(\n    //   0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e\n    // );\n    (, int256 price, , , ) = priceFeed.latestRoundData();\n    return uint256(price * 1e18);\n  }\n\n  function converter(uint256 eth, AggregatorV3Interface priceFeed)\n    internal\n    view\n    returns (uint256)\n  {\n    uint256 price = getPrice(priceFeed);\n    uint256 ethInUsd = (price * eth) / 1e18;\n    return ethInUsd;\n  }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}